#!/usr/bin/env bash

function print_usage {
    echo "Usage: ooninetworking <command> [arguments]"
    echo "  commands:"
    echo "    add_nettest <name>"
    echo "    del_nettest <name>"
    echo "    add_deck <filepath>"
    echo "    del_deck <filepath>"
    echo "    clean"
    exit -1
}

function gen_variables {
    # TODO: We need to skip the phy_dev extraction if the user provides one
    phy_dev=$(ip route | awk 'BEGIN {FS="dev "}; /^default/ {print $2}' | awk '{print $1}' | head -n 1)
    if [ -z $phy_dev ]
    then
        echo "[!] There's no network interface with a default route"
        exit -2
    fi

    subnet=$(ip route | awk -v phy_dev=$phy_dev '($0 ~ phy_dev) && ($0 !~ "default") {print $1}' | uniq)
    if [ -z $subnet ]
    then
        echo "[!] The default route's NIC doesn't have a route to its subnet"
        exit -3
    fi

    # TODO: It won't work for netmasks != 24
    host_ip=$(echo $subnet | sed 's;\(\([0-9]\{1,3\}\.\)\{3\}\)[0-9]\{1,3\};\1*;')
}

function gen_next_ip {
    if [ ! -e /tmp/hosts.nmap ]
    then
        nmap -sP $subnet -oG /tmp/hosts.nmap.raw 2> /dev/null > /dev/null
        grep "Up" /tmp/hosts.nmap.raw | cut -d' ' -f2 > /tmp/hosts.nmap
    fi
    taken_ips=$(cat /tmp/hosts.nmap)
    n=40
    assigned=0
    while [ $assigned -eq 0 ]
    do
        IP=$(echo $host_ip | sed "s;\*/24;$n;")
        old_n=$n
        for taken_ip in $taken_ips
        do
            if [ $taken_ip == $IP ]
            then
                n=$((n + 1))
                break
            fi
        done
        if [ $old_n -eq $n ]
        then
            assigned=1
            next_ip=$(echo $host_ip | sed "s;\*;$n;")
        fi
    done
}

function gen_iface_name {
    IFNAMSIZ=15
    nchars=$(echo $1 | wc -c)
    iface_name=""
    if [ $nchars -gt $IFNAMSIZ ]
    then
        words=$(echo $1 | sed 's/_/\n/g')
        nwords=$(($(echo $1 | sed 's/_/\n/g' | wc -l)))
        nword=$((nwords - 1))
        declare -a rev_words
        for word in $words
        do
            rev_words[nword]=$word
            nword=$((nword - 1))
        done
        length=$((IFNAMSIZ - (nwords*2 - 1)))
        for word in ${rev_words[*]}
        do
            size=$(echo $word | wc -c)
            if [ $((length - size + 2)) -gt 0 ]
            then
                iface_name="$word-$iface_name"
                length=$((length - size + 2))
            else
                first_letter=$(echo $word | head -c 1)
                iface_name="$first_letter-$iface_name"
                length=$((length - 2))
            fi
        done
        iface_name=$(echo $iface_name | sed 's/-$//g' | sed 's/-/_/g')
    else
        iface_name=$1
    fi
}

function add_interface {
    # TODO: if the interface already exists and is valid, we should do nothing
    gen_iface_name $1
    ip link add $iface_name type dummy
    gen_next_ip
    ip address add dev $iface_name $next_ip
    ip link set dev $iface_name up
    ip route del to $subnet dev $iface_name 2> /dev/null
    echo "$nettest_name $iface_name $IP" >> /tmp/hosts.nmap
}

function del_interface {
    gen_iface_name $1
    ip link del $iface_name
    awk -v nettest_name=$nettest_name '$0 !~ nettest_name {print $0}' /tmp/hosts.nmap > /tmp/hosts.nmap.cache
    mv /tmp/hosts.nmap.cache /tmp/hosts.nmap
    echo "$iface_name deleted"
}

function clean {
    interfaces=$(awk '{print $2}' /tmp/hosts.nmap)
    for interface in $interfaces
    do
        if [ ! -z $interface ]
        then
            del_interface $interface
        fi
    done
}
function aux_deck {
    if [ ! -e "$1" ]
    then
        echo "[!] The deck must be a file"
        exit -10
    fi

    # TODO: If the deck defines an execution for the same nettest, the interface is going to be the same for both of them
    nettests=$(awk 'BEGIN {FS=":"}; /test_file|nettest/ {print $2};' $1 | awk 'BEGIN {FS="/"}; {print $2}' | uniq)
}

function add_deck {
    aux_deck $1
    for nettest_name in $nettests
    do
        echo "Adding interface for $nettest_name"
        add_interface $nettest_name
    done
}

function del_deck {
    aux_deck $1
    for nettest_name in $nettests
    do
        echo "Deleting interface for $nettest_name"
        del_interface $nettest_name
    done
}

if [ $# -lt 1 ]
then
    print_usage
fi

comm=$1

gen_variables
case "$comm" in
    "add_nettest")
        if [ $# -lt 2 ]
        then
            print_usage
        fi

        nettest_name=$2
        echo "Creating virtual interface for $nettest_name..."
        add_interface $nettest_name
        echo "Done"
        ;;

    "del_nettest")
        if [ $# -lt 2 ]
        then
            print_usage
        fi

        nettest_name=$2
        echo "Deleting virtual interface for $nettest_name..."
        del_interface $nettest_name
        echo "Done"
        ;;

    "add_deck")
        if [ $# -lt 2 ]
        then
            print_usage
        fi

        deck_name=$2
        echo "Creating virtual interfaces for deck $deck_name..."
        add_deck $deck_name
        echo "Done"
        ;;

    "del_deck")
        if [ $# -lt 2 ]
        then
            print_usage
        fi

        deck_name=$2
        echo "Deleting virtual interfaces for deck $deck_name..."
        del_deck $deck_name
        echo "Done"
        ;;

    "clean")
        echo "Cleaning all virtual interfaces"
        clean
        echo "Done"
        ;;

    *)
        print_usage
esac

